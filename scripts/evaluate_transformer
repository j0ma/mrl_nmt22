#!/bin/bash
# Evaluates data

set -euo pipefail

# Command line arguments & defaults.
EXPERIMENT_NAME=$1
MODE=$2
BEAM=$3
SEED=$4
GPU_DEVICE=$5
MODEL_NAME=$6
SRC_LANG=$7
TGT_LANG=$8

if [[ -z "${GPU_DEVICE}" ]]; then
	echo "Defaulting to GPU 1..."
	GPU_DEVICE=1
fi

EXPERIMENT_FOLDER="$(pwd)/experiments/${EXPERIMENT_NAME}"
MODEL_FOLDER="${EXPERIMENT_FOLDER}/${MODEL_NAME}"

DEFAULT_EVAL_NAME="eval_${MODEL_NAME}"
EVAL_NAME=${9:-$DEFAULT_EVAL_NAME}

EVAL_OUTPUT_FOLDER="${EXPERIMENT_FOLDER}/eval/${EVAL_NAME}"
DATA_BIN_FOLDER="${EVAL_OUTPUT_FOLDER}/binarized_data"
EVAL_CHECKPOINT="${EVAL_OUTPUT_FOLDER}/checkpoint"

if [[ -z $BEAM ]]; then
	readonly BEAM=5
fi

REMOVE_PREPROCESSING_SRC=${10}
REMOVE_PREPROCESSING_HYP=${11}
REMOVE_PREPROCESSING_REF=${12}
REMOVE_PREPROCESSING_REFCLEAN=${13}

DETOKENIZE_SRC=${14}
DETOKENIZE_HYP=${15}
DETOKENIZE_REF=${16}
DETOKENIZE_REFCLEAN=${17}

RAW_DATA_FOLDER="${EXPERIMENT_FOLDER}/raw_data"
RAW_GOLD_DEFAULT="${RAW_DATA_FOLDER}/${SRC_LANG}-${TGT_LANG}.${MODE}.detok.${TGT_LANG}"
RAW_GOLD=${18:-$RAW_GOLD_DEFAULT}

USE_CPU=${19}

echo "DATA_BIN_FOLDER=${DATA_BIN_FOLDER}"
echo "EVAL_CHECKPOINT=${EVAL_CHECKPOINT}"
echo "MODE=${MODE}"
echo "BEAM=${BEAM}"
echo "SEED=${SEED}"
echo "RAW_DATA_FOLDER=${RAW_DATA_FOLDER}"
echo "RAW_GOLD=${RAW_GOLD}"

echo "REMOVE_PREPROCESSING_SRC=${REMOVE_PREPROCESSING_SRC}"
echo "REMOVE_PREPROCESSING_HYP=${REMOVE_PREPROCESSING_HYP}"
echo "REMOVE_PREPROCESSING_REF=${REMOVE_PREPROCESSING_REF}"
echo "REMOVE_PREPROCESSING_REFCLEAN=${REMOVE_PREPROCESSING_REFCLEAN}"

echo "DETOKENIZE_SRC=${DETOKENIZE_SRC}"
echo "DETOKENIZE_HYP=${DETOKENIZE_HYP}"
echo "DETOKENIZE_REF=${DETOKENIZE_REF}"
echo "DETOKENIZE_REFCLEAN=${DETOKENIZE_REFCLEAN}"

# Prediction options.

evaluate() {
	local -r DATA_BIN_FOLDER="$1"
	shift
	local -r EXPERIMENT_FOLDER="$1"
	shift
	local -r EVAL_CHECKPOINT="$1"
	shift
	local -r MODE="$1"
	shift
	local -r BEAM_SIZE="$1"
	shift
	local -r SEED="$1"
	shift
	local -r SRC_LANG="$1"
	shift
	local -r TGT_LANG="$1"
	shift
	local -r RAW_GOLD_FILE="$1"
	shift
	local -r REMOVE_PREPROCESSING_SRC="$1"
	shift
	local -r REMOVE_PREPROCESSING_HYP="$1"
	shift
	local -r REMOVE_PREPROCESSING_REF="$1"
	shift
	local -r REMOVE_PREPROCESSING_REFCLEAN="$1"
	shift
	local -r DETOKENIZE_SRC="$1"
	shift
	local -r DETOKENIZE_HYP="$1"
	shift
	local -r DETOKENIZE_REF="$1"
	shift
	local -r DETOKENIZE_REFCLEAN="$1"
	shift
	local -r USE_CPU="$1"
	shift

	echo "seed = ${SEED}"

    # Check for CPU usage
    if [[ -z "${USE_CPU}" ]]; then
        CPU_FLAG=""
    else
        CPU_FLAG="--cpu"
    fi

	# Fairseq insists on calling the dev-set "valid"; hack around this.
	local -r FAIRSEQ_MODE="${MODE/dev/valid}"

	OUT="${EVAL_OUTPUT_FOLDER}/${MODE}.out"
	SCORE="${EVAL_OUTPUT_FOLDER}/${MODE}.eval.score"

    # non-postprocessed outputs    
    SOURCE_TSV="${EVAL_OUTPUT_FOLDER}/${MODE}_with_source.tsv"
	GOLD="${EVAL_OUTPUT_FOLDER}/${MODE}.gold"
	HYPS="${EVAL_OUTPUT_FOLDER}/${MODE}.hyps"
	SOURCE="${EVAL_OUTPUT_FOLDER}/${MODE}.source"
    
    # postprocessed outputs    
    POST_SOURCE_TSV="${EVAL_OUTPUT_FOLDER}/${MODE}_with_source_postprocessed.tsv"
    POST_GOLD="${EVAL_OUTPUT_FOLDER}/${MODE}.postprocessed.gold"
	POST_HYPS="${EVAL_OUTPUT_FOLDER}/${MODE}.postprocessed.hyps"
	POST_SOURCE="${EVAL_OUTPUT_FOLDER}/${MODE}.postprocessed.source"
    POST_RAW_GOLD="${EVAL_OUTPUT_FOLDER}/${MODE}.postprocessed.gold_clean"

	echo "Evaluating into ${OUT}"

	# Make raw predictions
    CUDA_VISIBLE_DEVICES=$GPU_DEVICE fairseq-generate \
        "${DATA_BIN_FOLDER}" \
        ${CPU_FLAG} \
        --task=translation --truncate-source --truncate-target \
        --source-lang="${SRC_LANG}" \
        --target-lang="${TGT_LANG}" \
        --path="${EVAL_CHECKPOINT}" \
        --seed="${SEED}" \
        --gen-subset="${FAIRSEQ_MODE}" \
        --beam="${BEAM_SIZE}" \
        --no-progress-bar | tee "${OUT}"


	# Separate gold/system output/source into separate text files
	cat "${OUT}" | grep '^T-' | sed "s/^T-//g" | sort -k1 -n | cut -f2 >"${GOLD}"
	cat "${OUT}" | grep '^H-' | sed "s/^H-//g" | sort -k1 -n | cut -f3 >"${HYPS}"
	cat "${OUT}" | grep '^S-' | sed "s/^S-//g" | sort -k1 -n | cut -f2 >"${SOURCE}"

    # Detokenize gold/system output/source/raw gold
    python scripts/text_processing/postprocess.py \
        --references-path "${GOLD}" \
        --references-clean-path "${RAW_GOLD_FILE}" \
        --hypotheses-path "${HYPS}" \
        --source-path "${SOURCE}" \
        --remove-processing-hyp "${REMOVE_PREPROCESSING_HYP}" \
        --remove-processing-src "${REMOVE_PREPROCESSING_SRC}" \
        --remove-processing-ref "${REMOVE_PREPROCESSING_REF}" \
        --remove-processing-ref-clean "${REMOVE_PREPROCESSING_REFCLEAN}" \
        --detokenize-hyp "${DETOKENIZE_HYP}" \
        --detokenize-src "${DETOKENIZE_SRC}" \
        --detokenize-ref "${DETOKENIZE_REF}" \
        --detokenize-ref-clean "${DETOKENIZE_REFCLEAN}" \
        --source-output-path "${POST_SOURCE}" \
        --hypotheses-output-path "${POST_HYPS}" \
        --references-output-path "${POST_GOLD}" \
        --references-clean-output-path "${POST_RAW_GOLD}"
        
	
    # Make TSV with source and raw gold included
	paste "${GOLD}" "${HYPS}" "${SOURCE}" "${RAW_GOLD_FILE}" >"${SOURCE_TSV}"
    
    # Make TSV with postprocessed
	paste "${POST_GOLD}" "${POST_HYPS}" "${POST_SOURCE}" "${POST_RAW_GOLD}" >"${POST_SOURCE_TSV}"

    # Compute some evaluation metrics using the postprocessed (i.e. detokenized etc) outputs
	python scripts/evaluate.py \
        --references-path "${POST_RAW_GOLD}" \
        --hypotheses-path "${POST_HYPS}" \
        --source-path "${POST_SOURCE}" \
		--score-output-path "${SCORE}" \
        --src-language "${SRC_LANG}" \
        --tgt-language "${TGT_LANG}"

	# Finally output the score so Guild.ai grab it
	cat "${SCORE}"
}

evaluate "${DATA_BIN_FOLDER}" "${EXPERIMENT_FOLDER}" "${EVAL_CHECKPOINT}" "${MODE}" "${BEAM}" "${SEED}"  "${SRC_LANG}" "${TGT_LANG}" "${RAW_GOLD}" "${REMOVE_PREPROCESSING_SRC}" "${REMOVE_PREPROCESSING_HYP}" "${REMOVE_PREPROCESSING_REF}" "${REMOVE_PREPROCESSING_REFCLEAN}" "${DETOKENIZE_SRC}" "${DETOKENIZE_HYP}" "${DETOKENIZE_REF}" "${DETOKENIZE_REFCLEAN}" "${USE_CPU}"
